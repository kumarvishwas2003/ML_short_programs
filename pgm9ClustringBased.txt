import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np

# Load Iris dataset
iris = datasets.load_iris()
X = pd.DataFrame(iris.data, columns=['Sepal_Length', 'Sepal_Width', 'Petal_Length', 'Petal_Width'])
y = iris.target

# KMeans clustering
kmeans = KMeans(n_clusters=3)
kmeans_labels = kmeans.fit_predict(X)

# Normalize data for GMM
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Gaussian Mixture Model clustering
gmm = GaussianMixture(n_components=3)
gmm_labels = gmm.fit_predict(X_scaled)

# Define color map
colormap = np.array(['red', 'lime', 'black'])

# Plot results
plt.figure(figsize=(14, 10))

# Real clusters
plt.subplot(2, 2, 1)
plt.scatter(X['Petal_Length'], X['Petal_Width'], c=colormap[y], s=40)
plt.title('Real Clusters')
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')

# KMeans clustering
plt.subplot(2, 2, 2)
plt.scatter(X['Petal_Length'], X['Petal_Width'], c=colormap[kmeans_labels], s=40)
plt.title('K-Means Clustering')
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')

# GMM clustering
plt.subplot(2, 2, 3)
plt.scatter(X['Petal_Length'], X['Petal_Width'], c=colormap[gmm_labels], s=40)
plt.title('GMM Clustering')
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')

plt.tight_layout()
plt.show()

print('Observation: The GMM using EM algorithm based clustering matched the true labels more closely than K-Means.')
